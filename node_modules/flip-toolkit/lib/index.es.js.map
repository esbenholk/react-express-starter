{"version":3,"file":"index.es.js","sources":["../src/utilities/index.ts","../src/forked-rebound/onFrame.js","../src/constants.ts","../src/springSettings/index.ts","../src/forked-rebound/util.js","../src/forked-rebound/Loopers.js","../src/forked-rebound/Spring.js","../src/forked-rebound/SpringSystem.js","../src/flip/animateFlippedElements/spring/index.ts","../src/flip/animateFlippedElements/index.ts","../src/flip/getFlippedElementPositions/utilities.ts","../src/flip/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsAfterUpdate/index.ts","../src/flip/animateUnflippedElements/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/index.ts","../src/Flipper.ts","../src/Spring/index.ts"],"sourcesContent":["import { IndexableObject } from './types'\n\nexport const isNumber = (x: any) => typeof x === 'number'\n\nexport const isFunction = (x: any) => typeof x === 'function'\n\nexport const isObject = (x: any) =>\n  Object.prototype.toString.call(x) === '[object Object]'\n\nexport const toArray = (arrayLike: ArrayLike<any>) =>\n  Array.prototype.slice.apply(arrayLike)\n\nexport const getDuplicateValsAsStrings = (arr: string[]): string[] => {\n  const baseObj: IndexableObject = {}\n  const obj = arr.reduce((acc, curr) => {\n    acc[curr] = (acc[curr] || 0) + 1\n    return acc\n  }, baseObj)\n  return Object.keys(obj).filter(val => obj[val] > 1)\n}\n\n// tslint only likes this with a regular function, not an arrow function\nexport function assign(\n  target: IndexableObject,\n  ...args: IndexableObject[]\n): object {\n  args.forEach(arg => {\n    if (!arg) {\n      return\n    }\n    // Skip over if undefined or null\n    for (const nextKey in arg) {\n      // Avoid bugs when hasOwnProperty is shadowed\n      if (Object.prototype.hasOwnProperty.call(arg, nextKey)) {\n        target[nextKey] = arg[nextKey]\n      }\n    }\n  })\n  return target\n}\n\nexport const tweenProp = (start: number, end: number, position: number) =>\n  start + (end - start) * position\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nlet _onFrame\nif (typeof window !== \"undefined\") {\n  _onFrame = window.requestAnimationFrame\n}\n\n_onFrame =\n  _onFrame ||\n  function(callback) {\n    window.setTimeout(callback, 1000 / 60)\n  }\n\nexport default _onFrame\n","export const DATA_FLIP_ID = 'data-flip-id'\nexport const DATA_INVERSE_FLIP_ID = 'data-inverse-flip-id'\nexport const DATA_FLIP_COMPONENT_ID = 'data-flip-component-id'\nexport const DATA_FLIP_CONFIG = 'data-flip-config'\nexport const DATA_PORTAL_KEY = 'data-portal-key'\nexport const DATA_EXIT_CONTAINER = 'data-exit-container'\n","import { isObject, assign } from '../utilities'\nimport { SpringPresets, SpringConfig, SpringOption } from './types'\n\n// adapted from\n// https://github.com/chenglou/react-motion/blob/master/src/presets.js\nexport const springPresets: SpringPresets = {\n  noWobble: { stiffness: 200, damping: 26 },\n  gentle: { stiffness: 120, damping: 14 },\n  veryGentle: { stiffness: 130, damping: 17 },\n  wobbly: { stiffness: 180, damping: 12 },\n  stiff: { stiffness: 260, damping: 26 }\n}\n\nfunction argIsSpringConfig(\n  arg: SpringConfig | keyof SpringPresets | undefined\n): arg is SpringConfig {\n  return isObject(arg)\n}\n\nexport const normalizeSpring = (\n  spring?: SpringConfig | keyof SpringPresets | any\n) => {\n  if (argIsSpringConfig(spring)) {\n    return spring\n  } else if (Object.keys(springPresets).indexOf(spring) > -1) {\n    return springPresets[spring]\n  } else {\n    return {}\n  }\n}\n\nexport const getSpringConfig = ({\n  flipperSpring,\n  flippedSpring\n}: { flipperSpring?: SpringOption; flippedSpring?: SpringOption } = {}) => {\n  return assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(flipperSpring),\n    normalizeSpring(flippedSpring)\n  )\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nexport { default as onFrame } from './onFrame'\n\nconst start = Date.now()\nexport const performanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function'\n    ? () => performance.now()\n    : () => Date.now() - start\n\n// Lop off the first occurence of the reference in the Array.\nexport function removeFirst(array, item) {\n  const idx = array.indexOf(item)\n  idx !== -1 && array.splice(idx, 1)\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { onFrame, performanceNow } from \"./util\"\n\n/**\n * Plays each frame of the SpringSystem on animation\n * timing loop. This is the default type of looper for a new spring system\n * as it is the most common when developing UI.\n * @public\n */\nexport class AnimationLooper {\n  run() {\n    onFrame(() => {\n      this.springSystem.loop(performanceNow())\n    })\n  }\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { removeFirst } from './util'\n\nclass PhysicsState {\n  constructor() {\n    this.position = 0\n    this.velocity = 0\n  }\n}\n\nlet ID = 0\nconst MAX_DELTA_TIME_SEC = 0.064\nconst SOLVER_TIMESTEP_SEC = 0.001\n\n/**\n * Provides a model of a classical spring acting to\n * resolve a body to equilibrium. Springs have configurable\n * tension which is a force multipler on the displacement of the\n * spring from its rest point or `endValue` as defined by [Hooke's\n * law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n * configurable friction, which ensures that they do not oscillate\n * infinitely. When a Spring is displaced by updating it's resting\n * or `currentValue`, the SpringSystems that contain that Spring\n * will automatically start looping to solve for equilibrium. As each\n * timestep passes, `SpringListener` objects attached to the Spring\n * will be notified of the updates providing a way to drive an\n * animation off of the spring's resolution curve.\n * @public\n */\nclass Spring {\n  constructor(springSystem) {\n    this._id = `s${ID++}`\n    this._springSystem = springSystem\n\n    this.listeners = []\n    this._startValue = 0\n\n    this._currentState = new PhysicsState()\n    this._displacementFromRestThreshold = 0.001\n    this._endValue = 0\n    this._overshootClampingEnabled = false\n    this._previousState = new PhysicsState()\n    this._restSpeedThreshold = 0.001\n\n    this._tempState = new PhysicsState()\n    this._timeAccumulator = 0\n    this._wasAtRest = true\n    // hack from alex -- only call 1x\n    this._onActivateCalled\n    this._cachedSpringConfig = {}\n  }\n\n  getId() {\n    return this._id\n  }\n\n  /**\n   * Remove a Spring from simulation and clear its listeners.\n   * @public\n   */\n  destroy() {\n    this.listeners = []\n    this._springSystem.deregisterSpring(this)\n  }\n\n  /**\n   * Set the configuration values for this Spring. A SpringConfig\n   * contains the tension and friction values used to solve for the\n   * equilibrium of the Spring in the physics loop.\n   * @public\n   */\n  setSpringConfig(springConfig) {\n    this._springConfig = springConfig\n    return this\n  }\n  /**\n   * Retrieve the current value of the Spring.\n   * @public\n   */\n  getCurrentValue() {\n    return this._currentState.position\n  }\n\n  /**\n   * Get the absolute distance of the Spring from a given state value\n   */\n  getDisplacementDistanceForState(state) {\n    return Math.abs(this._endValue - state.position)\n  }\n\n  /**\n   * Set the endValue or resting position of the spring. If this\n   * value is different than the current value, the SpringSystem will\n   * be notified and will begin running its solver loop to resolve\n   * the Spring to equilibrium. Any listeners that are registered\n   * for onSpringEndStateChange will also be notified of this update\n   * immediately.\n   * @public\n   */\n\n  setEndValue(endValue) {\n    if (endValue === this._endValue) return this\n    this.prevEndValue = endValue\n    if (this._endValue === endValue && this.isAtRest()) {\n      return this\n    }\n    this._startValue = this.getCurrentValue()\n    this._endValue = endValue\n    this._springSystem.activateSpring(this.getId())\n    for (let i = 0, len = this.listeners.length; i < len; i++) {\n      const listener = this.listeners[i]\n      const onChange = listener.onSpringEndStateChange\n      onChange && onChange(this)\n    }\n    return this\n  }\n\n  /**\n   * Set the current velocity of the Spring, in pixels per second. As\n   * previously mentioned, this can be useful when you are performing\n   * a direct manipulation gesture. When a UI element is released you\n   * may call setVelocity on its animation Spring so that the Spring\n   * continues with the same velocity as the gesture ended with. The\n   * friction, tension, and displacement of the Spring will then\n   * govern its motion to return to rest on a natural feeling curve.\n   * @public\n   */\n  setVelocity(velocity) {\n    if (velocity === this._currentState.velocity) {\n      return this\n    }\n    this._currentState.velocity = velocity\n    this._springSystem.activateSpring(this.getId())\n    return this\n  }\n\n  setCurrentValue(currentValue) {\n    this._startValue = currentValue\n    this._currentState.position = currentValue\n    for (var i = 0, len = this.listeners.length; i < len; i++) {\n      var listener = this.listeners[i]\n      listener.onSpringUpdate && listener.onSpringUpdate(this)\n    }\n    return this\n  }\n\n  setAtRest() {\n    this._endValue = this._currentState.position\n    this._tempState.position = this._currentState.position\n    this._currentState.velocity = 0\n    return this\n  }\n\n  /**\n   * Enable overshoot clamping. This means that the Spring will stop\n   * immediately when it reaches its resting position regardless of\n   * any existing momentum it may have. This can be useful for certain\n   * types of animations that should not oscillate such as a scale\n   * down to 0 or alpha fade.\n   * @public\n   */\n  setOvershootClampingEnabled(enabled) {\n    this._overshootClampingEnabled = enabled\n    return this\n  }\n\n  /**\n   * Check if the Spring has gone past its end point by comparing\n   * the direction it was moving in when it started to the current\n   * position and end value.\n   * @public\n   */\n  isOvershooting() {\n    const start = this._startValue\n    const end = this._endValue\n    return (\n      this._springConfig.tension > 0 &&\n      ((start < end && this.getCurrentValue() > end) ||\n        (start > end && this.getCurrentValue() < end))\n    )\n  }\n\n  /**\n   * The main solver method for the Spring. It takes\n   * the current time and delta since the last time step and performs\n   * an RK4 integration to get the new position and velocity state\n   * for the Spring based on the tension, friction, velocity, and\n   * displacement of the Spring.\n   * @public\n   */\n  advance(time, realDeltaTime) {\n    let isAtRest = this.isAtRest()\n\n    if (isAtRest && this._wasAtRest) {\n      return\n    }\n\n    let adjustedDeltaTime = realDeltaTime\n    if (realDeltaTime > MAX_DELTA_TIME_SEC) {\n      adjustedDeltaTime = MAX_DELTA_TIME_SEC\n    }\n\n    this._timeAccumulator += adjustedDeltaTime\n\n    const tension = this._springConfig.tension\n    const friction = this._springConfig.friction\n    let position = this._currentState.position\n    let velocity = this._currentState.velocity\n    let tempPosition = this._tempState.position\n    let tempVelocity = this._tempState.velocity\n    let aVelocity\n    let aAcceleration\n    let bVelocity\n    let bAcceleration\n    let cVelocity\n    let cAcceleration\n    let dVelocity\n    let dAcceleration\n    let dxdt\n    let dvdt\n\n    while (this._timeAccumulator >= SOLVER_TIMESTEP_SEC) {\n      this._timeAccumulator -= SOLVER_TIMESTEP_SEC\n\n      if (this._timeAccumulator < SOLVER_TIMESTEP_SEC) {\n        this._previousState.position = position\n        this._previousState.velocity = velocity\n      }\n\n      aVelocity = velocity\n      aAcceleration =\n        tension * (this._endValue - tempPosition) - friction * velocity\n\n      tempPosition = position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      bVelocity = tempVelocity\n      bAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      cVelocity = tempVelocity\n      cAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + cVelocity * SOLVER_TIMESTEP_SEC\n      tempVelocity = velocity + cAcceleration * SOLVER_TIMESTEP_SEC\n      dVelocity = tempVelocity\n      dAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      dxdt =\n        (1.0 / 6.0) * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity)\n      dvdt =\n        (1.0 / 6.0) *\n        (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration)\n\n      position += dxdt * SOLVER_TIMESTEP_SEC\n      velocity += dvdt * SOLVER_TIMESTEP_SEC\n    }\n\n    this._tempState.position = tempPosition\n    this._tempState.velocity = tempVelocity\n\n    this._currentState.position = position\n    this._currentState.velocity = velocity\n\n    if (this._timeAccumulator > 0) {\n      this._interpolate(this._timeAccumulator / SOLVER_TIMESTEP_SEC)\n    }\n\n    if (\n      this.isAtRest() ||\n      (this._overshootClampingEnabled && this.isOvershooting())\n    ) {\n      if (this._springConfig.tension > 0) {\n        this._startValue = this._endValue\n        this._currentState.position = this._endValue\n      } else {\n        this._endValue = this._currentState.position\n        this._startValue = this._endValue\n      }\n      this.setVelocity(0)\n      isAtRest = true\n    }\n\n    let notifyActivate = false\n    if (this._wasAtRest) {\n      this._wasAtRest = false\n      notifyActivate = true\n    }\n\n    let notifyAtRest = false\n    if (isAtRest) {\n      this._wasAtRest = true\n      notifyAtRest = true\n    }\n\n    this.notifyPositionUpdated(notifyActivate, notifyAtRest)\n  }\n\n  notifyPositionUpdated(notifyActivate, notifyAtRest) {\n    this.listeners.filter(Boolean).forEach(listener => {\n      if (\n        notifyActivate &&\n        listener.onSpringActivate &&\n        !this._onActivateCalled\n      ) {\n        listener.onSpringActivate(this)\n        this._onActivateCalled = true\n      }\n\n      if (listener.onSpringUpdate) {\n        listener.onSpringUpdate(this)\n      }\n\n      if (notifyAtRest && listener.onSpringAtRest) {\n        listener.onSpringAtRest(this)\n      }\n    })\n  }\n\n  /**\n   * Check if the SpringSystem should advance. Springs are advanced\n   * a final frame after they reach equilibrium to ensure that the\n   * currentValue is exactly the requested endValue regardless of the\n   * displacement threshold.\n   * @public\n   */\n  systemShouldAdvance() {\n    return !this.isAtRest() || !this.wasAtRest()\n  }\n\n  wasAtRest() {\n    return this._wasAtRest\n  }\n\n  /**\n   * Check if the Spring is atRest meaning that it's currentValue and\n   * endValue are the same and that it has no velocity. The previously\n   * described thresholds for speed and displacement define the bounds\n   * of this equivalence check. If the Spring has 0 tension, then it will\n   * be considered at rest whenever its absolute velocity drops below the\n   * restSpeedThreshold.\n   * @public\n   */\n  isAtRest() {\n    const isAtRest =\n      Math.abs(this._currentState.velocity) < this._restSpeedThreshold &&\n      (this.getDisplacementDistanceForState(this._currentState) <=\n        this._displacementFromRestThreshold ||\n        this._springConfig.tension === 0)\n    return isAtRest\n  }\n\n  _interpolate(alpha) {\n    this._currentState.position =\n      this._currentState.position * alpha +\n      this._previousState.position * (1 - alpha)\n    this._currentState.velocity =\n      this._currentState.velocity * alpha +\n      this._previousState.velocity * (1 - alpha)\n  }\n\n  addListener(newListener) {\n    this.listeners.push(newListener)\n    return this\n  }\n\n  addOneTimeListener(newListener) {\n    const oneTimeFunc = func => (...args) => {\n      func(...args)\n      this.removeListener(newListener)\n    }\n    Object.keys(newListener).forEach(key => {\n      newListener[key] = oneTimeFunc(newListener[key])\n    })\n    this.listeners.push(newListener)\n    return this\n  }\n\n  removeListener(listenerToRemove) {\n    removeFirst(this.listeners, listenerToRemove)\n    return this\n  }\n}\n\nexport default Spring\n","//\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\nimport { AnimationLooper } from './Loopers'\nimport Spring from './Spring'\nimport { removeFirst } from './util'\n\n/**\n * A set of Springs that all run on the same physics\n * timing loop. To get started with a Rebound animation, first\n * create a new SpringSystem and then add springs to it.\n * @public\n */\nclass SpringSystem {\n  constructor(looper) {\n    this.looper = looper || new AnimationLooper()\n    this.looper.springSystem = this\n\n    this.listeners = []\n    this._activeSprings = []\n    this._idleSpringIndices = []\n    this._isIdle = true\n    this._lastTimeMillis = -1\n    this._springRegistry = {}\n  }\n\n  /**\n   * Add a new spring to this SpringSystem. This Spring will now be solved for\n   * during the physics iteration loop. By default the spring will use the\n   * default Origami spring config with 40 tension and 7 friction, but you can\n   * also provide your own values here.\n   * @public\n   */\n  createSpring(tension, friction) {\n    return this.createSpringWithConfig({ tension, friction })\n  }\n  /**\n   * Add a spring with the provided SpringConfig.\n   * @public\n   */\n  createSpringWithConfig(springConfig) {\n    const spring = new Spring(this)\n    this.registerSpring(spring)\n    spring.setSpringConfig(springConfig)\n    return spring\n  }\n\n  /**\n   * Check if a SpringSystem is idle or active. If all of the Springs in the\n   * SpringSystem are at rest, i.e. the physics forces have reached equilibrium,\n   * then this method will return true.\n   * @public\n   */\n  getIsIdle() {\n    return this._isIdle\n  }\n\n  /**\n   * Manually add a spring to this system. This is called automatically\n   * if a Spring is created with SpringSystem#createSpring.\n   *\n   * This method sets the spring up in the registry so that it can be solved\n   * in the solver loop.\n   * @public\n   */\n  registerSpring(spring) {\n    this._springRegistry[spring.getId()] = spring\n  }\n\n  /**\n   * Deregister a spring with this SpringSystem. The SpringSystem will\n   * no longer consider this Spring during its integration loop once\n   * this is called. This is normally done automatically for you when\n   * you call Spring#destroy.\n   * @public\n   */\n  deregisterSpring(spring) {\n    removeFirst(this._activeSprings, spring)\n    delete this._springRegistry[spring.getId()]\n  }\n\n  advance(time, deltaTime) {\n    while (this._idleSpringIndices.length > 0) {\n      this._idleSpringIndices.pop()\n    }\n    this._activeSprings.filter(Boolean).forEach(spring => {\n      if (spring.systemShouldAdvance()) {\n        spring.advance(time / 1000.0, deltaTime / 1000.0)\n      } else {\n        this._idleSpringIndices.push(this._activeSprings.indexOf(spring))\n      }\n    })\n\n    while (this._idleSpringIndices.length > 0) {\n      const idx = this._idleSpringIndices.pop()\n      idx >= 0 && this._activeSprings.splice(idx, 1)\n    }\n  }\n\n  /**\n   * This is the main solver loop called to move the simulation\n   * forward through time. Before each pass in the solver loop\n   * onBeforeIntegrate is called on an any listeners that have\n   * registered themeselves with the SpringSystem. This gives you\n   * an opportunity to apply any constraints or adjustments to\n   * the springs that should be enforced before each iteration\n   * loop. Next the advance method is called to move each Spring in\n   * the systemShouldAdvance forward to the current time. After the\n   * integration step runs in advance, onAfterIntegrate is called\n   * on any listeners that have registered themselves with the\n   * SpringSystem. This gives you an opportunity to run any post\n   * integration constraints or adjustments on the Springs in the\n   * SpringSystem.\n   * @public\n   */\n  loop(currentTimeMillis) {\n    let listener\n    if (this._lastTimeMillis === -1) {\n      this._lastTimeMillis = currentTimeMillis - 1\n    }\n    const ellapsedMillis = currentTimeMillis - this._lastTimeMillis\n    this._lastTimeMillis = currentTimeMillis\n\n    let i = 0\n    const len = this.listeners.length\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onBeforeIntegrate && listener.onBeforeIntegrate(this)\n    }\n\n    this.advance(currentTimeMillis, ellapsedMillis)\n    if (this._activeSprings.length === 0) {\n      this._isIdle = true\n      this._lastTimeMillis = -1\n    }\n\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onAfterIntegrate && listener.onAfterIntegrate(this)\n    }\n\n    if (!this._isIdle) {\n      this.looper.run()\n    }\n  }\n\n  /**\n   * Used to notify the SpringSystem that a Spring has become displaced.\n   * The system responds by starting its solver loop up if it is currently idle.\n   */\n  activateSpring(springId) {\n    const spring = this._springRegistry[springId]\n    if (this._activeSprings.indexOf(spring) === -1) {\n      this._activeSprings.push(spring)\n    }\n    if (this.getIsIdle()) {\n      this._isIdle = false\n      this.looper.run()\n    }\n  }\n}\n\nexport default SpringSystem\n","import { SpringSystem } from '../../../forked-rebound'\nimport { StaggerConfigValue } from '../../../types'\nimport { FlipData, FlipDataArray } from '../types'\nimport {\n  SpringSystemInterface,\n  AddListenerArgs\n} from '../../../forked-rebound/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\nexport const createSuspendedSpring = (flipData: FlipData) => {\n  const {\n    springConfig: { stiffness, damping, overshootClamping },\n    getOnUpdateFunc,\n    onAnimationEnd,\n    onSpringActivate\n  } = flipData\n\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  const onSpringAtRest = () => {\n    // prevent SpringSystem from caching unused springs\n    spring.destroy()\n    onAnimationEnd()\n  }\n\n  const springConfig: AddListenerArgs = {\n    onSpringActivate,\n    onSpringAtRest,\n    onSpringUpdate: getOnUpdateFunc({\n      spring,\n      onAnimationEnd\n    })\n  }\n\n  spring.addListener(springConfig)\n  return spring\n}\n\nexport const createSpring = (flipped: FlipData) => {\n  const spring = createSuspendedSpring(flipped)\n  spring.setEndValue(1)\n  return spring\n}\n\nexport const normalizeSpeed = (speedConfig: number | undefined) => {\n  if (typeof speedConfig !== 'number') return 1.1\n  return 1 + Math.min(Math.max(speedConfig * 5, 0), 5)\n}\n\nexport const createStaggeredSprings = (\n  flippedArray: FlipDataArray,\n  staggerConfig: StaggerConfigValue = {}\n) => {\n  if (!flippedArray || !flippedArray.length) {\n    return\n  }\n\n  if (staggerConfig.reverse) {\n    flippedArray.reverse()\n  }\n\n  const normalizedSpeed = normalizeSpeed(staggerConfig.speed)\n\n  const nextThreshold = 1 / Math.max(Math.min(flippedArray.length, 100), 10)\n\n  const setEndValueFuncs = flippedArray\n    .map((flipped, i) => {\n      const cachedGetOnUpdate = flipped.getOnUpdateFunc\n\n      // modify the update function to adjust\n      // the end value of the trailing Flipped component\n      flipped.getOnUpdateFunc = args => {\n        const onUpdate = cachedGetOnUpdate(args)\n        return spring => {\n          let currentValue = spring.getCurrentValue()\n          // make sure trailing animations complete\n          currentValue =\n            currentValue < 0.01 ? 0 : currentValue > 0.99 ? 1 : currentValue\n\n          const updateTrailingAnimation = currentValue >= nextThreshold\n          if (updateTrailingAnimation) {\n            if (setEndValueFuncs[i + 1]) {\n              setEndValueFuncs[i + 1]!(\n                Math.max(Math.min(currentValue * normalizedSpeed, 1), 0)\n              )\n            }\n          }\n          // now call the actual update function\n          onUpdate(spring)\n        }\n      }\n      return flipped\n    })\n    .map(flipped => {\n      const spring = createSuspendedSpring(flipped)\n      if (!spring) {\n        return\n      }\n      return spring.setEndValue.bind(spring)\n    })\n    .filter(Boolean)\n\n  if (setEndValueFuncs[0]) {\n    setEndValueFuncs[0]!(1)\n  }\n}\n","import * as Rematrix from 'rematrix'\nimport { getSpringConfig } from '../../springSettings'\nimport {\n  toArray,\n  isFunction,\n  isNumber,\n  getDuplicateValsAsStrings,\n  assign,\n  tweenProp\n} from '../../utilities'\nimport * as constants from '../../constants'\nimport {\n  GetOnUpdateFunc,\n  OnUpdate,\n  Matrix,\n  InvertedChildren,\n  AnimateFlippedElementsArgs,\n  AnimatedVals,\n  FlipDataArray,\n  FlipData,\n  InitializeFlip\n} from './types'\nimport { BoundingClientRect } from '../getFlippedElementPositions/types'\nimport { FlippedIds } from '../types'\nimport { createSpring, createStaggeredSprings } from './spring'\nimport { IndexableObject } from '../../utilities/types'\nimport { FlipId } from '../../types'\n\n// 3d transforms were causing weird issues in chrome,\n// especially when opacity was also being tweened,\n// so convert to a 2d matrix\nexport const convertMatrix3dArrayTo2dArray = (matrix: Matrix): Matrix =>\n  [0, 1, 4, 5, 12, 13].map(index => matrix[index])\n\nexport const convertMatrix2dArrayToString = (matrix: Matrix) =>\n  `matrix(${matrix.join(', ')})`\n\nexport const invertTransformsForChildren = ({\n  invertedChildren,\n  matrix,\n  body\n}: {\n  matrix: Matrix\n  body: HTMLBodyElement\n  invertedChildren: InvertedChildren\n}) => {\n  invertedChildren.forEach(([child, childFlipConfig]) => {\n    if (!body.contains(child)) {\n      return\n    }\n    const scaleX = matrix[0]\n    const scaleY = matrix[3]\n    const translateX = matrix[4]\n    const translateY = matrix[5]\n\n    const inverseVals = { translateX: 0, translateY: 0, scaleX: 1, scaleY: 1 }\n    let transformString = ''\n    if (childFlipConfig.translate) {\n      inverseVals.translateX = -translateX / scaleX\n      inverseVals.translateY = -translateY / scaleY\n      transformString += `translate(${inverseVals.translateX}px, ${inverseVals.translateY}px)`\n    }\n    if (childFlipConfig.scale) {\n      inverseVals.scaleX = 1 / scaleX\n      inverseVals.scaleY = 1 / scaleY\n      transformString += ` scale(${inverseVals.scaleX}, ${inverseVals.scaleY})`\n    }\n    child.style.transform = transformString\n  })\n}\n\nexport const createApplyStylesFunc = ({\n  element,\n  invertedChildren,\n  body\n}: {\n  element: HTMLElement\n  invertedChildren: InvertedChildren\n  body: HTMLBodyElement\n}) => ({\n  matrix,\n  opacity,\n  forceMinVals\n}: {\n  matrix: Matrix\n  opacity?: number\n  forceMinVals?: boolean\n}) => {\n  if (isNumber(opacity)) {\n    element.style.opacity = opacity + ''\n  }\n\n  if (forceMinVals) {\n    element.style.minHeight = '1px'\n    element.style.minWidth = '1px'\n  }\n\n  if (!matrix) {\n    return\n  }\n\n  const stringTransform = convertMatrix2dArrayToString(matrix)\n\n  // always apply transform, even if identity,\n  // because identity might be the starting state in a FLIP\n  // transition, if the element's position is controlled by transforms\n  element.style.transform = stringTransform\n\n  if (invertedChildren) {\n    invertTransformsForChildren({\n      invertedChildren,\n      matrix,\n      body\n    })\n  }\n}\n\nexport const rectInViewport = ({\n  top,\n  bottom,\n  left,\n  right\n}: BoundingClientRect) => {\n  return (\n    top < window.innerHeight &&\n    bottom > 0 &&\n    left < window.innerWidth &&\n    right > 0\n  )\n}\n\nconst getInvertedChildren = (element: HTMLElement, id: string) =>\n  toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}=\"${id}\"]`)\n  )\n\nexport default ({\n  flippedIds,\n  flipCallbacks,\n  inProgressAnimations,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  applyTransformOrigin,\n  spring,\n  getElement,\n  debug,\n  staggerConfig = {},\n  decisionData = {},\n  onComplete,\n  containerEl\n}: AnimateFlippedElementsArgs) => {\n  // the stuff below is used so we can return a promise that resolves when all FLIP animations have\n  // completed\n  let closureResolve: (flipIds: FlippedIds) => void\n\n  const flipCompletedPromise: Promise<FlippedIds> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n  // hook for users of lib to attach logic when all flip animations have completed\n  if (onComplete) {\n    flipCompletedPromise.then(() => onComplete(containerEl, decisionData))\n  }\n  if (!flippedIds.length) {\n    return () => {\n      closureResolve!([])\n      return flipCompletedPromise\n    }\n  }\n\n  const completedAnimationIds: FlippedIds = []\n\n  const firstElement: HTMLElement = getElement(flippedIds[0])\n  // special handling for iframes\n  const body = firstElement\n    ? firstElement.ownerDocument!.querySelector('body')!\n    : document.querySelector('body')!\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (debug) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[react-flip-toolkit]\\nThe \"debug\" prop is set to true. All FLIP animations will return at the beginning of the transition.'\n      )\n    }\n  }\n\n  const duplicateFlipIds = getDuplicateValsAsStrings(flippedIds)\n  if (process.env.NODE_ENV !== 'production') {\n    if (duplicateFlipIds.length) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `[react-flip-toolkit]\\nThere are currently multiple elements with the same flipId on the page.\\nThe animation will only work if each Flipped component has a unique flipId.\\nDuplicate flipId${\n          duplicateFlipIds.length > 1 ? 's' : ''\n        }: ${duplicateFlipIds.join('\\n')}`\n      )\n    }\n  }\n\n  const flipDataArray: FlipDataArray = flippedIds\n\n    // take all the measurements we need\n    // and return an object with animation functions + necessary data\n    .map(id => {\n      const prevRect = flippedElementPositionsBeforeUpdate[id].rect\n      const currentRect = flippedElementPositionsAfterUpdate[id].rect\n      const prevOpacity = flippedElementPositionsBeforeUpdate[id].opacity\n      const currentOpacity = flippedElementPositionsAfterUpdate[id].opacity\n      const needsForcedMinVals = currentRect.width < 1 || currentRect.height < 1\n      const element = flippedElementPositionsAfterUpdate[id].element\n\n      // don't animate elements outside of the user's viewport\n      if (!rectInViewport(prevRect) && !rectInViewport(currentRect)) {\n        return false\n      }\n\n      // this might happen if we are rapidly adding & removing elements(?)\n      if (!element) {\n        return false\n      }\n\n      const flipConfig = JSON.parse(element.dataset.flipConfig!)\n\n      const springConfig = getSpringConfig({\n        flipperSpring: spring,\n        flippedSpring: flipConfig.spring\n      })\n\n      const stagger =\n        flipConfig.stagger === true ? 'default' : flipConfig.stagger\n\n      const toReturn = {\n        element,\n        id,\n        stagger,\n        springConfig\n      }\n\n      if (flipCallbacks[id] && flipCallbacks[id].shouldFlip) {\n        const elementShouldFlip = flipCallbacks[id].shouldFlip!(\n          decisionData.previous,\n          decisionData.current\n        )\n        if (!elementShouldFlip) {\n          return false\n        }\n      }\n\n      // don't animate elements that didn't visibly change\n      // but possibly animate their children\n\n      const translateXDifference = Math.abs(prevRect.left - currentRect.left)\n      const translateYDifference = Math.abs(prevRect.top - currentRect.top)\n\n      const translateDifference = translateXDifference + translateYDifference\n\n      const scaleXDifference = Math.abs(prevRect.width - currentRect.width)\n      const scaleYDifference = Math.abs(prevRect.height - currentRect.height)\n\n      const scaleDifference = scaleXDifference + scaleYDifference\n\n      const opacityDifference = Math.abs(currentOpacity - prevOpacity)\n      if (\n        translateDifference < 0.5 &&\n        scaleDifference < 0.5 &&\n        opacityDifference < 0.01\n      ) {\n        return false\n      }\n\n      const currentTransform = Rematrix.parse(\n        flippedElementPositionsAfterUpdate[id].transform\n      )\n\n      const toVals: AnimatedVals = { matrix: currentTransform }\n\n      const fromVals: AnimatedVals = { matrix: [] }\n      const transformsArray = [currentTransform]\n\n      // we're only going to animate the values that the child wants animated\n      if (flipConfig.translate) {\n        transformsArray.push(\n          Rematrix.translateX(prevRect.left - currentRect.left)\n        )\n        transformsArray.push(\n          Rematrix.translateY(prevRect.top - currentRect.top)\n        )\n      }\n      // going any smaller than 1px breaks transitions in Chrome\n      if (flipConfig.scale) {\n        transformsArray.push(\n          Rematrix.scaleX(\n            Math.max(prevRect.width, 1) / Math.max(currentRect.width, 1)\n          )\n        )\n        transformsArray.push(\n          Rematrix.scaleY(\n            Math.max(prevRect.height, 1) / Math.max(currentRect.height, 1)\n          )\n        )\n      }\n\n      if (flipConfig.opacity) {\n        fromVals.opacity = prevOpacity\n        toVals.opacity = currentOpacity\n      }\n\n      let invertedChildren: InvertedChildren = []\n\n      if (\n        !flipCallbacks[id] ||\n        !flipCallbacks[id].shouldInvert ||\n        flipCallbacks[id].shouldInvert!(\n          decisionData.previous,\n          decisionData.current\n        )\n      ) {\n        const invertedChildElements = getInvertedChildren(element, id)\n        invertedChildren = invertedChildElements.map(c => [\n          c,\n          JSON.parse(c.dataset.flipConfig!)\n        ]) as InvertedChildren\n      }\n\n      fromVals.matrix = convertMatrix3dArrayTo2dArray(\n        transformsArray.reduce(Rematrix.multiply)\n      )\n\n      toVals.matrix = convertMatrix3dArrayTo2dArray(toVals.matrix)\n\n      const applyStyles = createApplyStylesFunc({\n        element,\n        invertedChildren,\n        body\n      })\n\n      let onComplete: () => void\n      if (flipCallbacks[id] && flipCallbacks[id].onComplete) {\n        // must cache or else this could cause an error\n        const cachedOnComplete = flipCallbacks[id].onComplete\n        onComplete = () => cachedOnComplete!(element, decisionData)\n      }\n\n      // this should be called when animation ends naturally\n      // but also when it is interrupted\n      // when it is called, the animation has already been cancelled\n      const onAnimationEnd = (isCancellation: boolean) => {\n        delete inProgressAnimations[id]\n        if (isFunction(onComplete)) {\n          onComplete()\n        }\n        // remove identity transform -- this should have no effect on layout\n        element.style.transform = ''\n        invertedChildren.forEach(([element]) => {\n          element.style.transform = ''\n        })\n        if (needsForcedMinVals && element) {\n          element.style.minHeight = ''\n          element.style.minWidth = ''\n        }\n        if (isCancellation) return\n        \n        completedAnimationIds.push(id)\n\n        if (completedAnimationIds.length >= flipDataArray.length) {\n          // we can theoretically call multiple times since a promise only resolves 1x\n          // but that shouldnt happen\n          closureResolve(completedAnimationIds)\n        }\n      }\n\n      const animateOpacity =\n        isNumber(fromVals.opacity) &&\n        isNumber(toVals.opacity) &&\n        fromVals.opacity !== toVals.opacity\n\n      let onStartCalled = false\n\n      const getOnUpdateFunc: GetOnUpdateFunc = ({ spring, onAnimationEnd }) => {\n        inProgressAnimations[id] = {\n          destroy: spring.destroy.bind(spring),\n          onAnimationEnd\n        }\n        const onUpdate: OnUpdate = spring => {\n          if (flipCallbacks[id] && flipCallbacks[id].onSpringUpdate) {\n            flipCallbacks[id].onSpringUpdate!(spring.getCurrentValue())\n          }\n          // trigger the user provided onStart function\n          if (!onStartCalled) {\n            onStartCalled = true\n            if (flipCallbacks[id] && flipCallbacks[id].onStart) {\n              flipCallbacks[id].onStart!(element, decisionData)\n            }\n          }\n\n          const currentValue = spring.getCurrentValue()\n          if (!body.contains(element)) {\n            spring.destroy()\n            return\n          }\n\n          const vals: AnimatedVals = { matrix: [] }\n\n          vals.matrix = fromVals.matrix.map((fromVal, index) =>\n            tweenProp(fromVal, toVals.matrix[index], currentValue)\n          )\n\n          if (animateOpacity) {\n            vals.opacity = tweenProp(\n              fromVals.opacity!,\n              toVals.opacity!,\n              currentValue\n            )\n          }\n          applyStyles(vals)\n        }\n        return onUpdate\n      }\n\n      const initializeFlip: InitializeFlip = () => {\n        // before animating, immediately apply FLIP styles to prevent flicker\n        applyStyles({\n          matrix: fromVals.matrix,\n          opacity: animateOpacity ? fromVals.opacity : undefined,\n          forceMinVals: needsForcedMinVals\n        })\n\n        if (flipCallbacks[id] && flipCallbacks[id].onStartImmediate) {\n          flipCallbacks[id].onStartImmediate!(element, decisionData)\n        }\n        // and batch any other style updates if necessary\n        if (flipConfig.transformOrigin) {\n          element.style.transformOrigin = flipConfig.transformOrigin\n        } else if (applyTransformOrigin) {\n          element.style.transformOrigin = '0 0'\n        }\n\n        invertedChildren.forEach(([child, childFlipConfig]) => {\n          if (childFlipConfig.transformOrigin) {\n            child.style.transformOrigin = childFlipConfig.transformOrigin\n          } else if (applyTransformOrigin) {\n            child.style.transformOrigin = '0 0'\n          }\n        })\n      }\n\n      return assign({}, toReturn, {\n        stagger,\n        springConfig,\n        getOnUpdateFunc,\n        initializeFlip,\n        onAnimationEnd,\n        delayUntil: flipConfig.delayUntil\n      }) as FlipData\n    })\n    // filter out data for all non-animated elements first\n    .filter(Boolean) as FlipDataArray\n\n  flipDataArray.forEach(({ initializeFlip }) => initializeFlip())\n\n  if (debug) {\n    return () => {}\n  }\n\n  const elementIsFlipped = (flipId: FlipId) =>\n    flipDataArray.filter(f => f.id === flipId).length\n\n  const delayedFlip = flipDataArray.filter(\n    f => f.delayUntil && elementIsFlipped(f.delayUntil)\n  )\n\n  // key: flipId value: flip to delay until key is called\n  const delayUntilSprings = {} as IndexableObject\n  // key: flipId value: stagger to delay until key is called\n  const delayUntilStaggers = {} as IndexableObject\n  // key: stagger value: true\n  const delayedStaggerKeys = {} as IndexableObject\n\n  delayedFlip.forEach(flip => {\n    if (flip.stagger) {\n      delayedStaggerKeys[flip.stagger] = true\n      if (delayUntilStaggers[flip.delayUntil!])\n        delayUntilStaggers[flip.delayUntil!].push(flip.stagger)\n      else delayUntilStaggers[flip.delayUntil!] = [flip.stagger]\n    } else {\n      if (delayUntilSprings[flip.delayUntil!])\n        delayUntilSprings[flip.delayUntil!].push(flip)\n      else delayUntilSprings[flip.delayUntil!] = [flip]\n    }\n  })\n\n  const staggerDict = flipDataArray\n    .filter(flipData => flipData.stagger)\n    .reduce(\n      (acc, curr) => {\n        if (acc[curr.stagger]) {\n          acc[curr.stagger].push(curr)\n        } else {\n          acc[curr.stagger] = [curr]\n        }\n        return acc\n      },\n      {} as IndexableObject\n    )\n\n  const immediateFlip = flipDataArray.filter(f => delayedFlip.indexOf(f) === -1)\n\n  immediateFlip.forEach(flipData => {\n    flipData.onSpringActivate = () => {\n      if (delayUntilSprings[flipData.id]) {\n        delayUntilSprings[flipData.id].forEach(createSpring)\n      }\n      if (delayUntilStaggers[flipData.id]) {\n        const uniqueStaggerKeys = Object.keys(\n          delayUntilStaggers[flipData.id].reduce(\n            (acc: IndexableObject, curr: string) =>\n              assign(acc, { [curr]: true }),\n            {}\n          )\n        )\n        uniqueStaggerKeys.forEach((staggerKey: string) => {\n          createStaggeredSprings(\n            staggerDict[staggerKey],\n            staggerConfig[staggerKey]\n          )\n        })\n      }\n    }\n  })\n\n  return () => {\n    // if there are no active FLIP animations, immediately resolve the\n    // returned promise\n    if (!flipDataArray.length) {\n      closureResolve([])\n    }\n    // animate non-staggered elements\n    immediateFlip\n      .filter(flipData => {\n        return !flipData.stagger\n      })\n      .forEach(createSpring)\n\n    // animate staggered elements\n    Object.keys(staggerDict).forEach(staggerKey => {\n      if (delayedStaggerKeys[staggerKey]) return\n      createStaggeredSprings(staggerDict[staggerKey], staggerConfig[staggerKey])\n    })\n    return flipCompletedPromise\n  }\n}\n","import { toArray, assign } from '../../utilities'\nimport * as constants from '../../constants'\nimport { BoundingClientRect } from './types'\n\nexport const addTupleToObject = (acc: {}, curr: [any, any]) =>\n  assign(acc, { [curr[0]]: curr[1] })\n\nexport const getAllElements = (\n  element?: HTMLElement,\n  portalKey?: string\n): HTMLElement[] => {\n  if (portalKey) {\n    return toArray(\n      document.querySelectorAll(`[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]`)\n    )\n  } else {\n    return toArray(element!.querySelectorAll(`[${constants.DATA_FLIP_ID}]`))\n  }\n}\nexport const getRects = (flippedElements: HTMLElement[]) => {\n  return flippedElements.map((child: HTMLElement): [\n    HTMLElement,\n    BoundingClientRect\n  ] => [child, child.getBoundingClientRect()])\n}\n","import animateUnflippedElements from './animateUnflippedElements'\nimport animateFlippedElements from './animateFlippedElements'\nimport getFlippedElementPositionsAfterUpdate from './getFlippedElementPositions/getFlippedElementPositionsAfterUpdate'\nimport * as constants from '../constants'\nimport { assign, toArray } from '../utilities'\nimport {\n  GetElement,\n  BaseFlipArgs,\n  OnFlipKeyUpdateArgs,\n  FlippedIds\n} from './types'\nimport { AnimateUnflippedElementsArgs } from './animateUnflippedElements/types'\nimport {\n  AnimateFlippedElementsArgs,\n  ScopedSelector\n} from './animateFlippedElements/types'\n\nconst createPortalScopedSelector = (portalKey: string) => (\n  selector: string\n) => {\n  return toArray(\n    document.querySelectorAll(\n      `[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]${selector}`\n    )\n  )\n}\nconst createFlipperScopedSelector = (containerEl: HTMLElement) => {\n  const tempFlipperId = Math.random().toFixed(5)\n  containerEl.dataset.flipperId = tempFlipperId\n\n  return (selector: string) => {\n    return toArray(\n      containerEl.querySelectorAll(\n        `[data-flipper-id=\"${tempFlipperId}\"] ${selector}`\n      )\n    )\n  }\n}\nconst createScopedSelector = ({\n  containerEl,\n  portalKey\n}: {\n  containerEl?: HTMLElement\n  portalKey?: string\n}): ScopedSelector => {\n  if (portalKey) {\n    return createPortalScopedSelector(portalKey)\n  } else if (containerEl) {\n    return createFlipperScopedSelector(containerEl)\n  } else {\n    return () => []\n  }\n}\n\nconst createGetElementFunc = (scopedSelector: ScopedSelector): GetElement => {\n  return (id: string) => {\n    return scopedSelector(`[${constants.DATA_FLIP_ID}=\"${id}\"]`)[0]\n  }\n}\n\nconst onFlipKeyUpdate = ({\n  cachedOrderedFlipIds = [],\n  inProgressAnimations = {},\n  flippedElementPositionsBeforeUpdate = {},\n  flipCallbacks = {},\n  containerEl,\n  applyTransformOrigin,\n  spring,\n  debug,\n  portalKey,\n  staggerConfig = {},\n  decisionData = {},\n  handleEnterUpdateDelete,\n  onComplete,\n  onStart\n}: OnFlipKeyUpdateArgs) => {\n\n  const flippedElementPositionsAfterUpdate = getFlippedElementPositionsAfterUpdate(\n    {\n      element: containerEl,\n      portalKey\n    }\n  )\n\n  const scopedSelector = createScopedSelector({\n    containerEl,\n    portalKey\n  })\n  const getElement = createGetElementFunc(scopedSelector)\n\n  const isFlipped = (id: string) =>\n    flippedElementPositionsBeforeUpdate[id] &&\n    flippedElementPositionsAfterUpdate[id]\n\n  const unflippedIds = Object.keys(flippedElementPositionsBeforeUpdate)\n    .concat(Object.keys(flippedElementPositionsAfterUpdate))\n    .filter(id => !isFlipped(id))\n\n  const baseArgs: BaseFlipArgs = {\n    flipCallbacks,\n    getElement,\n    flippedElementPositionsBeforeUpdate,\n    flippedElementPositionsAfterUpdate,\n    inProgressAnimations,\n    decisionData\n  }\n\n  const animateUnFlippedElementsArgs = assign({}, baseArgs, {\n    unflippedIds\n  }) as AnimateUnflippedElementsArgs\n\n  const {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  } = animateUnflippedElements(animateUnFlippedElementsArgs)\n\n  const flippedIds: FlippedIds = cachedOrderedFlipIds.filter(isFlipped)\n  // @ts-ignore\n  const animateFlippedElementsArgs: AnimateFlippedElementsArgs = assign(\n    {},\n    baseArgs,\n    {\n      containerEl,\n      flippedIds,\n      applyTransformOrigin,\n      spring,\n      debug,\n      staggerConfig,\n      scopedSelector,\n      onComplete\n    }\n  )\n  if (onStart) onStart(containerEl, decisionData)\n\n  // the function handles putting flipped elements back in their original positions\n  // and returns another function to actually call the flip animation\n  const flip = animateFlippedElements(animateFlippedElementsArgs)\n\n  if (handleEnterUpdateDelete) {\n    handleEnterUpdateDelete({\n      hideEnteringElements,\n      animateEnteringElements,\n      animateExitingElements,\n      animateFlippedElements: flip\n    })\n  } else {\n    hideEnteringElements()\n    animateExitingElements().then(animateEnteringElements)\n    flip()\n  }\n}\n\nexport default onFlipKeyUpdate\n","import {\n  addTupleToObject,\n  getRects,\n  getAllElements\n} from '../utilities'\nimport { FlippedElementPositionsAfterUpdate } from './types'\n\nconst getFlippedElementPositionsAfterUpdate = ({\n  element,\n  portalKey\n}: {\n  element: HTMLElement\n  portalKey?: string\n}): FlippedElementPositionsAfterUpdate => {\n  return (\n    getRects(getAllElements(element, portalKey))\n      .map(([child, childBCR]) => {\n        const computedStyle = window.getComputedStyle(child)\n        return [\n          child.dataset.flipId,\n          {\n            element: child,\n            rect: childBCR,\n            opacity: parseFloat(computedStyle.opacity!),\n            transform: computedStyle.transform\n          }\n        ]\n      })\n      // @ts-ignore\n      .reduce(addTupleToObject, {})\n  )\n}\n\nexport default getFlippedElementPositionsAfterUpdate\n","import { AnimateUnflippedElementsArgs, FragmentTuple } from './types'\n\nconst animateUnflippedElements = ({\n  unflippedIds,\n  flipCallbacks,\n  getElement,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  inProgressAnimations,\n  decisionData\n}: AnimateUnflippedElementsArgs) => {\n  const enteringElementIds = unflippedIds.filter(\n    id => flippedElementPositionsAfterUpdate[id]\n  )\n  const animatedEnteringElementIds = enteringElementIds.filter(\n    id => flipCallbacks[id] && flipCallbacks[id].onAppear\n  )\n\n  const animatedExitingElementIds = unflippedIds.filter(\n    id =>\n      flippedElementPositionsBeforeUpdate[id] &&\n      flipCallbacks[id] &&\n      flipCallbacks[id].onExit\n  )\n\n  const hideEnteringElements = () => {\n    animatedEnteringElementIds.forEach(id => {\n      const element = getElement(id)\n      if (element) {\n        element.style.opacity = '0'\n      }\n    })\n  }\n\n  const animateEnteringElements = () => {\n    animatedEnteringElementIds.forEach((id, i) => {\n      const element = getElement(id)\n      if (element) {\n        flipCallbacks[id].onAppear!(element, i, decisionData)\n      }\n    })\n  }\n\n  let closureResolve: () => void\n\n  const promiseToReturn: Promise<void> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n\n  const fragmentTuples: FragmentTuple[] = []\n  let exitingElementCount = 0\n\n  const onExitCallbacks = animatedExitingElementIds.map((id, i) => {\n    const {\n      domDataForExitAnimations: {\n        element,\n        parent,\n        childPosition: { top, left, width, height }\n      }\n    } = flippedElementPositionsBeforeUpdate[id]\n    // insert back into dom\n    if (getComputedStyle(parent).position === 'static') {\n      parent.style.position = 'relative'\n    }\n    element.style.transform = 'matrix(1, 0, 0, 1, 0, 0)'\n    element.style.position = 'absolute'\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n    // taken out of the dom flow, the element might have lost these dimensions\n    element.style.height = height + 'px'\n    element.style.width = width + 'px'\n    let fragmentTuple: FragmentTuple | undefined = fragmentTuples.filter(\n      t => t[0] === parent\n    )[0]\n    if (!fragmentTuple) {\n      fragmentTuple = [parent, document.createDocumentFragment()]\n      fragmentTuples.push(fragmentTuple)\n    }\n    fragmentTuple[1].appendChild(element)\n\n    exitingElementCount += 1\n\n    const stop = () => {\n      try {\n        parent.removeChild(element)\n      } catch (DOMException) {\n        // the element is already gone\n      } finally {\n        exitingElementCount -= 1\n        if (exitingElementCount === 0) {\n          closureResolve()\n        }\n      }\n    }\n    // @ts-ignore\n    inProgressAnimations[id] = { stop }\n    return () => flipCallbacks[id].onExit!(element, i, stop, decisionData)\n  })\n\n  // now append all the fragments from the onExit callbacks\n  // (we use fragments for performance)\n  fragmentTuples.forEach(t => {\n    t[0].appendChild(t[1])\n  })\n\n  if (!onExitCallbacks.length) {\n    closureResolve!()\n  }\n\n  const animateExitingElements = () => {\n    onExitCallbacks.forEach(c => c())\n    return promiseToReturn\n  }\n\n  return {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  }\n}\n\nexport default animateUnflippedElements\n","import { addTupleToObject, getAllElements, getRects } from '../utilities'\nimport * as constants from '../../../constants'\nimport { toArray, assign } from '../../../utilities'\nimport {\n  FlippedElementPositionsBeforeUpdateReturnVals,\n  FlippedElementPositionsBeforeUpdate,\n  GetFlippedElementPositionsBeforeUpdateArgs,\n  ParentBCRs,\n  ChildIdsToParentBCRs,\n  ChildIdsToParents\n} from './types'\nimport { InProgressAnimations } from '../../../types'\n\nexport const cancelInProgressAnimations = (\n  inProgressAnimations: InProgressAnimations,\n  animatingElements: HTMLElement[]\n) => {\n  Object.keys(inProgressAnimations).forEach(id => {\n    if (inProgressAnimations[id].destroy) {\n      inProgressAnimations[id].destroy()\n    }\n    if (inProgressAnimations[id].onAnimationEnd) {\n      inProgressAnimations[id].onAnimationEnd(true)\n    }\n    delete inProgressAnimations[id]\n  })\n  animatingElements.forEach(el => {\n    el.style.transform = ''\n    el.style.opacity = ''\n  })\n}\n\nconst getFlippedElementPositionsBeforeUpdate = ({\n  element,\n  flipCallbacks = {},\n  inProgressAnimations = {},\n  portalKey\n}: GetFlippedElementPositionsBeforeUpdateArgs): FlippedElementPositionsBeforeUpdateReturnVals => {\n  const flippedElements = getAllElements(element, portalKey)\n\n  const inverseFlippedElements = toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}]`)\n  )\n\n  const childIdsToParentBCRs: ChildIdsToParentBCRs = {}\n  const parentBCRs: ParentBCRs = []\n  const childIdsToParents: ChildIdsToParents = {}\n  // this is for exit animations so we can re-insert exiting elements in the\n  // DOM later\n  flippedElements\n    .filter(\n      el =>\n        flipCallbacks &&\n        flipCallbacks[el.dataset.flipId!] &&\n        flipCallbacks[el.dataset.flipId!].onExit\n    )\n    .forEach(el => {\n      let parent = el.parentNode as HTMLElement\n      // this won't work for IE11\n      if (el.closest) {\n        const exitContainer = el.closest(\n          `[${constants.DATA_EXIT_CONTAINER}]`\n        ) as HTMLElement\n        if (exitContainer) {\n          parent = exitContainer\n        }\n      }\n      let bcrIndex = parentBCRs.findIndex(n => n[0] === parent)\n      if (bcrIndex === -1) {\n        parentBCRs.push([parent, parent.getBoundingClientRect()])\n        bcrIndex = parentBCRs.length - 1\n      }\n      childIdsToParentBCRs[el.dataset.flipId!] = parentBCRs[bcrIndex][1]\n      childIdsToParents[el.dataset.flipId!] = parent\n    })\n\n  const filteredFlippedElements = getRects(flippedElements)\n\n  const flippedElementPositions: FlippedElementPositionsBeforeUpdate = filteredFlippedElements\n    .map(([child, childBCR]) => {\n      const domDataForExitAnimations = {}\n\n      // only cache extra data for exit animations\n      // if the element has an onExit listener\n      if (\n        flipCallbacks &&\n        flipCallbacks[child.dataset.flipId!] &&\n        flipCallbacks[child.dataset.flipId!].onExit\n      ) {\n        const parentBCR = childIdsToParentBCRs[child.dataset.flipId!]\n\n        assign(domDataForExitAnimations, {\n          element: child,\n          parent: childIdsToParents[child.dataset.flipId!],\n          childPosition: {\n            top: childBCR.top - parentBCR.top,\n            left: childBCR.left - parentBCR.left,\n            width: childBCR.width,\n            height: childBCR.height\n          }\n        })\n      }\n\n      return [\n        child.dataset.flipId,\n        {\n          rect: childBCR,\n          opacity: parseFloat(window.getComputedStyle(child).opacity || '1'),\n          domDataForExitAnimations\n        }\n      ]\n    })\n    // @ts-ignore\n    .reduce(addTupleToObject, {})\n  // do this at the very end since we want to cache positions of elements\n  // while they are mid-transition\n  cancelInProgressAnimations(\n    inProgressAnimations,\n    flippedElements.concat(inverseFlippedElements)\n  )\n\n  return {\n    flippedElementPositions,\n    cachedOrderedFlipIds: filteredFlippedElements.map(\n      ([el]) => el.dataset.flipId!\n    )\n  }\n}\n\nexport default getFlippedElementPositionsBeforeUpdate\n","import onFlipKeyUpdate from './flip'\nimport getFlippedElementPositionsBeforeUpdate from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate'\nimport { assign } from './utilities'\nimport {\n  StaggerConfig,\n  HandleEnterUpdateDelete,\n  InProgressAnimations,\n  FlipCallbacks,\n  OnFlipperComplete,\n  FlippedProps,\n  OnFlipperStart\n} from './types'\nimport { SpringOption } from './springSettings/types'\nimport { FlippedElementPositionsBeforeUpdate } from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlippedIds } from './flip/types'\n\ninterface Options {\n  element: HTMLElement\n  staggerConfig?: StaggerConfig\n  spring?: SpringOption\n  applyTransformOrigin?: boolean\n  handleEnterUpdateDelete?: HandleEnterUpdateDelete\n  debug?: boolean\n  onComplete?: OnFlipperComplete\n}\n\nclass Flipper {\n  private element!: HTMLElement\n  private staggerConfig!: StaggerConfig\n  private applyTransformOrigin: boolean = true\n  private handleEnterUpdateDelete!: HandleEnterUpdateDelete\n  private debug?: boolean\n  private spring!: SpringOption\n  private inProgressAnimations: InProgressAnimations\n  private flipCallbacks: FlipCallbacks\n  private snapshot!: {\n    flippedElementPositions: FlippedElementPositionsBeforeUpdate\n    cachedOrderedFlipIds: FlippedIds\n  }\n  private onComplete?: OnFlipperComplete\n  private onStart?: OnFlipperStart\n\n  constructor(options: Options) {\n    assign(this, options)\n\n    this.inProgressAnimations = {}\n    this.flipCallbacks = {}\n\n    this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this)\n    this.update = this.update.bind(this)\n    this.addFlipped = this.addFlipped.bind(this)\n    this.addInverted = this.addInverted.bind(this)\n  }\n\n  recordBeforeUpdate() {\n    this.snapshot = getFlippedElementPositionsBeforeUpdate({\n      element: this.element,\n      flipCallbacks: this.flipCallbacks,\n      inProgressAnimations: this.inProgressAnimations\n    })\n  }\n  update(prevDecisionData: any, currentDecisionData: any) {\n    if (this.snapshot) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: this.snapshot\n          .flippedElementPositions,\n        cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds,\n        containerEl: this.element,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.applyTransformOrigin,\n        spring: this.spring,\n        debug: this.debug,\n        staggerConfig: this.staggerConfig,\n        handleEnterUpdateDelete: this.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevDecisionData,\n          current: currentDecisionData\n        },\n        onComplete: this.onComplete,\n        onStart: this.onStart\n      })\n      delete this.snapshot\n    }\n  }\n\n  addFlipped({\n    element,\n    flipId,\n    opacity,\n    translate,\n    scale,\n    transformOrigin,\n    spring,\n    stagger,\n    delayUntil,\n    onAppear,\n    onStart,\n    onSpringUpdate,\n    onComplete,\n    onExit,\n    shouldFlip,\n    shouldInvert\n  }: FlippedProps & { element: HTMLElement }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!flipId) {\n      throw new Error('No flipId provided')\n    }\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin,\n      spring,\n      stagger,\n      delayUntil\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    if (flipId) {\n      element.dataset.flipId = String(flipId)\n    }\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n    // finally, add callbacks\n    this.flipCallbacks[flipId] = {\n      shouldFlip,\n      shouldInvert,\n      onAppear,\n      onStart,\n      onSpringUpdate,\n      onComplete,\n      onExit\n    }\n  }\n\n  addInverted({\n    element,\n    parent,\n    opacity,\n    translate,\n    scale,\n    transformOrigin\n  }: {\n    element: HTMLElement\n    parent: HTMLElement\n    opacity: boolean\n    translate: boolean\n    scale: boolean\n    transformOrigin: string\n  }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!parent) {\n      throw new Error('parent must be provided')\n    }\n\n    const inverseFlipId = parent.dataset.flipId\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    element.dataset.inverseFlipId = inverseFlipId\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n  }\n}\n\nexport default Flipper\n","// this is exclusively for users of the library to create their own enter + exit animations\nimport { SpringSystem } from '../forked-rebound'\nimport { SpringSystemInterface } from '../forked-rebound/types.d'\nimport { tweenProp, assign } from '../utilities'\nimport { normalizeSpring, springPresets } from '../springSettings'\nimport { SimpleSpringOptions } from './types'\nimport { SpringConfig } from '../springSettings/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\n/**\n * A simple spring function for animating DOM properties.\n * Returns a function that will immediately cancel the in-progress animation.\n * */\nconst createSimpleSpring = ({\n  config,\n  values,\n  onUpdate,\n  delay = 0,\n  onComplete\n}: SimpleSpringOptions) => {\n  const { stiffness, damping, overshootClamping } = assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(config)\n  ) as SpringConfig\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  spring.addListener({\n    onSpringAtRest: spring => {\n      if (onComplete) onComplete()\n      spring.destroy()\n    },\n    onSpringUpdate: spring => {\n      const springVal = spring.getCurrentValue()\n      if (!values) return onUpdate(springVal)\n      const currentValues = Object.keys(values)\n        .map(value => [\n          value,\n          tweenProp(values[value][0], values[value][1], springVal)\n        ])\n        .reduce((acc, curr) => {\n          return Object.assign(acc, { [curr[0]]: curr[1] })\n        }, {})\n      onUpdate(currentValues)\n    }\n  })\n  if (delay) {\n    setTimeout(() => {\n      spring.setEndValue(1)\n    }, delay)\n  } else {\n    spring.setEndValue(1)\n  }\n  return spring\n}\n\nexport default createSimpleSpring\n"],"names":["const","isNumber","x","isFunction","isObject","Object","prototype","toString","call","toArray","arrayLike","Array","slice","apply","getDuplicateValsAsStrings","arr","obj","reduce","acc","curr","keys","filter","val","assign","target","args","forEach","arg","nextKey","hasOwnProperty","_onFrame","tweenProp","start","end","position","springPresets","noWobble","stiffness","damping","gentle","veryGentle","wobbly","stiff","normalizeSpring","spring","indexOf","window","requestAnimationFrame","callback","setTimeout","Date","now","performanceNow","performance","removeFirst","array","item","idx","splice","AnimationLooper","run","springSystem","loop","PhysicsState","constructor","velocity","ID","Spring","_id","_springSystem","listeners","_startValue","_currentState","_displacementFromRestThreshold","_endValue","_overshootClampingEnabled","_previousState","_restSpeedThreshold","_tempState","_timeAccumulator","_wasAtRest","_cachedSpringConfig","getId","this","destroy","deregisterSpring","setSpringConfig","springConfig","_springConfig","getCurrentValue","getDisplacementDistanceForState","state","Math","abs","setEndValue","endValue","prevEndValue","isAtRest","activateSpring","let","i","len","length","onChange","onSpringEndStateChange","setVelocity","setCurrentValue","currentValue","listener","onSpringUpdate","setAtRest","setOvershootClampingEnabled","enabled","isOvershooting","tension","advance","time","realDeltaTime","adjustedDeltaTime","aVelocity","aAcceleration","bVelocity","bAcceleration","cVelocity","cAcceleration","friction","tempPosition","tempVelocity","_interpolate","notifyActivate","notifyAtRest","notifyPositionUpdated","Boolean","onSpringActivate","_onActivateCalled","onSpringAtRest","systemShouldAdvance","wasAtRest","alpha","addListener","newListener","push","addOneTimeListener","key","func","removeListener","listenerToRemove","SpringSystem","looper","_activeSprings","_idleSpringIndices","_isIdle","_lastTimeMillis","_springRegistry","createSpring","createSpringWithConfig","registerSpring","getIsIdle","deltaTime","pop","currentTimeMillis","ellapsedMillis","onBeforeIntegrate","onAfterIntegrate","springId","createSuspendedSpring","flipData","overshootClamping","onAnimationEnd","getOnUpdateFunc","flipped","createStaggeredSprings","flippedArray","staggerConfig","reverse","speedConfig","normalizedSpeed","speed","min","max","nextThreshold","setEndValueFuncs","map","cachedGetOnUpdate","onUpdate","bind","convertMatrix3dArrayTo2dArray","matrix","index","rectInViewport","ref","innerHeight","innerWidth","addTupleToObject","getAllElements","element","portalKey","document","querySelectorAll","getRects","flippedElements","child","getBoundingClientRect","onFlipKeyUpdate","flippedElementPositionsAfterUpdate","computedStyle","getComputedStyle","dataset","flipId","rect","childBCR","opacity","parseFloat","transform","getFlippedElementPositionsAfterUpdate","containerEl","scopedSelector","selector","createPortalScopedSelector","tempFlipperId","random","toFixed","flipperId","createFlipperScopedSelector","createScopedSelector","getElement","id","createGetElementFunc","isFlipped","flippedElementPositionsBeforeUpdate","unflippedIds","concat","baseArgs","flipCallbacks","inProgressAnimations","decisionData","closureResolve","animatedEnteringElementIds","onAppear","animatedExitingElementIds","onExit","promiseToReturn","Promise","resolve","fragmentTuples","exitingElementCount","onExitCallbacks","parent","style","top","left","height","width","fragmentTuple","t","createDocumentFragment","appendChild","stop","removeChild","DOMException","c","animateUnflippedElements","animateFlippedElementsArgs","cachedOrderedFlipIds","applyTransformOrigin","debug","onComplete","onStart","flip","flipCompletedPromise","then","flippedIds","completedAnimationIds","firstElement","body","ownerDocument","querySelector","process","env","NODE_ENV","console","error","duplicateFlipIds","join","flipDataArray","prevRect","currentRect","prevOpacity","currentOpacity","needsForcedMinVals","flipConfig","JSON","parse","flippedSpring","getSpringConfig","flipperSpring","stagger","toReturn","shouldFlip","previous","current","translateDifference","scaleDifference","opacityDifference","currentTransform","Rematrix","toVals","fromVals","transformsArray","translate","scale","invertedChildren","shouldInvert","invertedChildElements","getInvertedChildren","applyStyles","forceMinVals","minHeight","minWidth","stringTransform","convertMatrix2dArrayToString","contains","scaleX","scaleY","translateY","inverseVals","translateX","transformString","childFlipConfig","invertTransformsForChildren","createApplyStylesFunc","cachedOnComplete","animateOpacity","onStartCalled","vals","fromVal","undefined","onStartImmediate","transformOrigin","isCancellation","delayUntil","initializeFlip","delayedFlip","f","delayUntilSprings","delayUntilStaggers","delayedStaggerKeys","staggerDict","immediateFlip","staggerKey","animateFlippedElements","handleEnterUpdateDelete","hideEnteringElements","animateEnteringElements","animateExitingElements","getFlippedElementPositionsBeforeUpdate","inverseFlippedElements","childIdsToParentBCRs","parentBCRs","childIdsToParents","el","parentNode","closest","exitContainer","bcrIndex","findIndex","n","filteredFlippedElements","flippedElementPositions","domDataForExitAnimations","parentBCR","childPosition","animatingElements","cancelInProgressAnimations","Flipper","options","recordBeforeUpdate","update","addFlipped","addInverted","snapshot","prevDecisionData","currentDecisionData","Error","String","stringify","inverseFlipId","createSimpleSpring","springVal","values","currentValues","value","delay"],"mappings":"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"}